int max(int[] risultati){
	int max = risultati[0];
	
	for(int r: risultati){
		if(r>max){
			max = r;
		}
	}
	
	return max;
}

int trovaDDL(int[][] m, int[] x, int[] prev, int lungh){
	if(x[0] == prev[0] && x[1] == prev[1]) return lungh;
	
	int[][] offsets = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
	int[] nextPos = {x[0], x[1]};
	int nextVal = m[x[0]][x[1]];
	
	for (int[] off : offsets) {
		if (!(off[0] + x[0] < 0 || off[0] + x[0] >= m.length || off[1] + x[1] < 0 || off[1] + x[1] >= m[0].length)) {
			// posizione interna alla matrice
			if (nextVal > m[off[0] + x[0]][off[1] + x[1]]) {
				nextVal = m[off[0] + x[0]][off[1] + x[1]];
				nextPos = {off[0] + x[0], off[1] + x[1]};
			}
		}
	}
	
	return trovaDDL(m, nextPos, x, lungh+1);
}

void popolaRisultati(int[] risultati, int[][] m){
	int cont = 0;
	
	for(int i=0; i<m.length; i++){
		for(int j=0; j<m[0].length; j++){
			risultati[cont] = trovaDDL(m, {i, j}, {-1, -1}, 0);
			cont++;
		}
	}
}



int ddl(int[][] m) {
	int[] risultati = new int[m.length*m[0].length];
	
	popolaRisultati(risultati, m);
	
	return max(risultati);
}
